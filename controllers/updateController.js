export async function handleUpdateData(req, res, collection) {
  const { sheets, timestamp } = req.body;

  if (!Array.isArray(sheets)) {
    return res.status(400).json({ error: "Sheets must be an array" });
  }

  try {
    const docs = sheets.map((sheet) => ({
      timestamp: timestamp ? new Date(timestamp) : new Date(),
      sheetName: sheet.sheetName,
      values: sheet.values,
      backgrounds: sheet.backgrounds,
    }));

    // ‚úÖ –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Google Sheets:");
    console.log("‚è∞ –í—Ä–µ–º—è:", new Date().toISOString());
    console.log("üìÑ –ö–æ–ª-–≤–æ —Ç–∞–±–ª–∏—Ü:", docs.length);
    docs.forEach((doc, i) => {
      console.log(`--- –¢–∞–±–ª–∏—Ü–∞ ${i + 1}: ${doc.sheetName} ---`);
    });

    const result = await collection.insertMany(docs);
    res.status(200).json({
      message: "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
      insertedCount: result.insertedCount,
    });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
}
