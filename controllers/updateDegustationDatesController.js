export async function handleUpdateDegustationDates(req, res, degustationDates) {
  const { sheets, timestamp } = req.body;

  if (!Array.isArray(sheets)) {
    return res.status(400).json({ error: "Sheets must be an array" });
  }

  try {
    let inserted = 0;
    let updated = 0;
    let skipped = 0;

    for (const sheet of sheets) {
      const query = { sheetName: sheet.sheetName };

      const existingDoc = await degustationDates.findOne(query);

      const newDoc = {
        timestamp: timestamp ? new Date(timestamp) : new Date(),
        sheetName: sheet.sheetName,
        values: sheet.values,
        backgrounds: sheet.backgrounds,
        comments: sheet.comments,
      };

      if (!existingDoc) {
        // üîπ –ï—Å–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç ‚Äî –≤—Å—Ç–∞–≤–ª—è–µ–º
        await degustationDates.insertOne(newDoc);
        inserted++;
      } else {
        // üîπ –ï—Å–ª–∏ –µ—Å—Ç—å ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º
        const isSame =
          JSON.stringify(existingDoc.values) === JSON.stringify(sheet.values) &&
          JSON.stringify(existingDoc.backgrounds) ===
            JSON.stringify(sheet.backgrounds) &&
          JSON.stringify(existingDoc.comments) ===
            JSON.stringify(sheet.comments);

        if (isSame) {
          skipped++;
        } else {
          // üîπ –ï—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º
          await degustationDates.replaceOne({ _id: existingDoc._id }, newDoc);
          updated++;
        }
      }
    }

    res.status(200).json({
      message: "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
      inserted,
      updated,
      skipped,
    });

    console.log("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –¥–∞—Ç–∞—Ö –æ—Ç Google Sheets:");
    console.log("‚è∞ –í—Ä–µ–º—è:", new Date().toISOString());
    console.log(
      `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${inserted} | üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated} | ‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped}`
    );
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
}
